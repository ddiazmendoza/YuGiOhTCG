@page
@using YGOCardSearch.Data.Models;
@model YGOCardSearch.Pages.DeckBuilder

@{
    var TotalDeckCards = Model.Deck.ExtraDeck.Count() + Model.Deck.MainDeck.Count();

    int pageSize = 10;
    int totalPages = (int)Math.Ceiling((double)Model.SearchCards.Count / pageSize);
    int currentPage = Request.Query.ContainsKey("page") ? Convert.ToInt32(Request.Query["page"]) : 1;
    int startIndex = (currentPage - 1) * pageSize;
    int endIndex = Math.Min(startIndex + pageSize - 1, Model.SearchCards.Count - 1);
}

<!DOCTYPE html>
<html>
<head>
    <!-- Include your necessary CSS and meta tags here -->
    <!-- Include script references -->
    <script type="module" src="/js/deck.js"></script>
    <script type="module" src="/js/rendering.js"></script>
    <script type="module" src="/js/interaction.js"></script>
    <script type="module" src="/js/deckBuilder.js"></script>
</head>
<body>
    <div class="split-section">
        <div class="deck-section">
            <table class="table-dark">
                <tbody>
                    <h1>
                        Deck @Model.Deck.DeckName
                    </h1>
                    <p class="text text-light">
                        Total cards: @TotalDeckCards
                    </p>
                    <a class="cool-button" asp-page="/HandTesting" asp-route-deck="@Model.Deck">
                        Hand Testing
                    </a>
                    <div class="DeckBuilder_DeckInfo">
                        <!--Add all the info from this deck. Effect monsters, normal, spells, traps, etc. Maybe a graph would be cool-->
                    </div>

                    <!-- Content will be added dynamically using JavaScript -->
                    <div class="DeckBuilder_DeckCards_Container">
                        <h2>Main Deck [@Model.Deck.MainDeck.Count]</h2>
                        <div class="DeckBuilder_Container_MainDeck"></div>
                        <h2>Extra deck: [@Model.Deck.ExtraDeck.Count]</h2>
                        <div class="DeckBuilder_Container_ExtraDeck"></div>
                        <h2>Side deck: [@Model.Deck.SideDeck.Count] </h2>
                        <div class="DeckBuilder_Container_SideDeck"></div>
                    </div>
                    
                </tbody>
            </table>
        </div>
        <div class="cards-section">
            <div class="DeckBuilder_CardSearch_Container">
                <form method="GET">
                    <div class="form-group">
                        <div class="input-group">
                            <input type="search"
                                   class="form-control"
                                   asp-for="Search" />
                            <button class="btn btn-light">Buscar</button>
                        </div>
                    </div>
                </form>
            </div>
            <div class="DeckBuilder_CardsListDetails">
                <table class="table table-dark">
                    <tbody>
                        @if (Model.SearchCards != null)
                        {
                            for (int i = startIndex; i <= endIndex; i++)
                            {
                                var card = Model.SearchCards[i];
                                string c = card.KonamiCardId.ToString() + ".jpg";
                                <tr>
                                    <td>
                                        <span class="inner deckView">
                                            <a asp-page="CardViewer" asp-route-id="@card.KonamiCardId">
                                                <img src="images/small/@c" alt="">
                                            </a>
                                        </span>
                                    </td>
                                   
                                    <td>
                                        <h3>@card.Name</h3>
                                        <p>@card.Desc</p>
                                    </td>
                                    <td>
                                        <button class="btn btn-success add-to-deck">Add to Deck</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <div class="text-center">
                    <nav aria-label="Pagination">
                        <ul class="pagination">
                            @for (int pageNum = 1; pageNum <= totalPages; pageNum++)
                            {
                                <li class="page-item @(pageNum == currentPage ? "active" : "")">
                                    <a class="page-link" href="?page=@pageNum">@pageNum</a>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            </div>
            
        </div>
    </div>

    <!-- Include necessary JavaScript files here -->


@section Scripts {
        <script>
            const deckData = @Html.Raw(Json.Serialize(Model.Deck));
        </script>
}
</body>

</html>
