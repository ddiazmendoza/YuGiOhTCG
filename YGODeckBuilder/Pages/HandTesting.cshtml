@page
@model YGODeckBuilder.Pages.HandTestingModel
@{
    ViewData["Title"] = "Hand Testing";
}

<h1>Hand Testing</h1>

<div id="deck" class="deck-area">Deck (@Model.Deck.MainDeck.Count cards)</div>

<div id="hand" class="hand-area"></div>

<button id="drawButton">Draw Card</button>
<button id="shuffleButton">Shuffle Deck</button>

<script>
    let deckCards = @Json.Serialize(Model.Deck.MainDeck);
    let handCards = [];

    function updateDeckDisplay() {
        document.getElementById('deck').innerText = `Deck (${deckCards.length} cards)`;
    }

    function createCardElement(card) {
        const cardElement = document.createElement('div');
        cardElement.className = 'card';
        cardElement.style.backgroundImage = `url(${card.imageUrl})`;
        cardElement.style.backgroundSize = 'cover';
        cardElement.style.backgroundPosition = 'center';
        cardElement.dataset.cardId = card.id;
        cardElement.addEventListener('mousedown', startDragging);
        return cardElement;
    }

    function drawCard() {
        if (deckCards.length > 0) {
            const card = deckCards.pop();
            handCards.push(card);
            const cardElement = createCardElement(card);
            document.getElementById('hand').appendChild(cardElement);
            updateDeckDisplay();
        }
    }

    function shuffleDeck() {
        for (let i = deckCards.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [deckCards[i], deckCards[j]] = [deckCards[j], deckCards[i]];
        }
        updateDeckDisplay();
    }

    let isDragging = false;
    let draggedCard = null;
    let offset = { x: 0, y: 0 };

    function startDragging(e) {
        isDragging = true;
        draggedCard = e.target;
        offset.x = e.clientX - draggedCard.offsetLeft;
        offset.y = e.clientY - draggedCard.offsetTop;
        draggedCard.style.zIndex = 1000;
    }

    function drag(e) {
        if (isDragging) {
            draggedCard.style.left = (e.clientX - offset.x) + 'px';
            draggedCard.style.top = (e.clientY - offset.y) + 'px';
        }
    }

    function stopDragging() {
        isDragging = false;
        if (draggedCard) {
            draggedCard.style.zIndex = '';
            draggedCard = null;
        }
    }

    document.getElementById('drawButton').addEventListener('click', drawCard);
    document.getElementById('shuffleButton').addEventListener('click', shuffleDeck);
    document.addEventListener('mousemove', drag);
    document.addEventListener('mouseup', stopDragging);

    // Initial setup
    updateDeckDisplay();
</script>

<style>
    .deck-area {
        width: 120px;
        height: 180px;
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        text-align: center;
        line-height: 180px;
        margin-bottom: 20px;
    }

    .hand-area {
        min-height: 200px;
        border: 1px dashed #ccc;
        padding: 10px;
    }

    .card {
        width: 100px;
        height: 150px;
        border: 1px solid #000;
        display: inline-block;
        margin: 5px;
        position: absolute;
        cursor: move;
    }
</style>
