@page
@model YGODeckBuilder.Pages.HandTestingModel
@{
    ViewData["Title"] = "Hand Testing";
}

<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
    <h1>Hand Testing</h1>
    <div style="display: flex; align-items: center;">
        <label for="cardSize" style="margin-right: 10px;">Card Size:</label>
        <input type="range" id="cardSize" min="50" max="200" value="150" style="width: 100px;">
        <button id="settingsButton" style="margin-left: 10px;">⚙️ Settings</button>
    </div>
</div>

<!-- Add this modal -->
<div id="settingsModal" style="display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.4);">
    <div style="background-color: #fefefe; margin: 15% auto; padding: 20px; border: 1px solid #888; width: 80%; max-width: 500px;">
        <h2>Settings</h2>
        <label for="transitionRate">Transition Rate (ms): <span id="transitionRateValue">300</span></label>
        <input type="range" id="transitionRate" min="0" max="1000" value="300" style="width: 100%;">
        <button id="closeSettings">Close</button>
    </div>
</div>

<div id="gameArea" class="game-area">
    <div id="deck" class="deck-area">
        <img src="/images/default_card_back.jpg" alt="Deck" id="deckImage">
        <span id="deckCount"></span>
    </div>
</div>

<div class="button-area">
    <button id="drawButton">Draw Card</button>
    <button id="shuffleButton">Shuffle Deck</button>
</div>

<script>
    let deckCards = @Json.Serialize(Model.Deck.MainDeck);
    let handCards = [];
    const imagesFolder = String.raw`@Model.ImagesFolder`;

    function updateDeckDisplay() {
        const deckCount = document.getElementById('deckCount');
        deckCount.textContent = `${deckCards.length} cards`;
        
        const deckImage = document.getElementById('deckImage');
        if (deckCards.length === 0) {
            deckImage.style.opacity = '0.3'; // Make the image translucent when deck is empty
        } else {
            deckImage.style.opacity = '1';
        }
    }

    let cardSize = 150; // Updated default card size (px)
    const cardSizeInput = document.getElementById('cardSize');

    function createCardElement(card) {
        const cardElement = document.createElement('div');
        cardElement.className = 'card';
        
        const imgElement = document.createElement('img');
        imgElement.src = `/images/${card.id}.jpg`;
        imgElement.alt = card.name;
        imgElement.onerror = function() {
            this.src = '/images/default_card_back.jpg';
            console.log(`Failed to load image for card: ${card.name}`);
        };
        
        cardElement.appendChild(imgElement);
        cardElement.dataset.cardId = card.id;
        cardElement.dataset.cardName = card.name;
        cardElement.addEventListener('mousedown', startDragging);
        cardElement.style.transition = `all ${transitionRate}ms ease`;
        return cardElement;
    }

    function drawCard() {
        if (deckCards.length > 0) {
            const card = deckCards.pop();
            handCards.push(card);
            const cardElement = createCardElement(card);
            document.body.appendChild(cardElement);
            // For newly drawn cards, position them at a fixed location
            cardElement.style.left = '20px';
            cardElement.style.top = '100px';
            updateDeckDisplay();
            return cardElement;
        } else {
            alert("No more cards in the deck!");
            return null;
        }
    }

    function positionCard(cardElement, index) {
        if (cardElement) {
            const leftPosition = 20 + index * (cardSize + 10);
            const topPosition = 100; // Adjust this value to position cards below the title
            cardElement.style.left = `${leftPosition}px`;
            cardElement.style.top = `${topPosition}px`;
        }
    }

    function drawInitialHand() {
        for (let i = 0; i < 5; i++) {
            const cardElement = drawCard();
            positionCard(cardElement, i);
        }
    }

    function shuffleDeck() {
        for (let i = deckCards.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [deckCards[i], deckCards[j]] = [deckCards[j], deckCards[i]];
        }
        updateDeckDisplay();
    }

    let isDragging = false;
    let draggedCard = null;
    let offset = { x: 0, y: 0 };

    function startDragging(e) {
        isDragging = true;
        draggedCard = e.currentTarget;
        offset.x = e.clientX - draggedCard.offsetLeft;
        offset.y = e.clientY - draggedCard.offsetTop;
        draggedCard.style.zIndex = 1000;
        draggedCard.classList.add('dragging');
    }

    function drag(e) {
        if (isDragging) {
            e.preventDefault();
            requestAnimationFrame(() => {
                draggedCard.style.left = (e.clientX - offset.x) + 'px';
                draggedCard.style.top = (e.clientY - offset.y) + 'px';
            });
        }
    }

    function stopDragging() {
        if (draggedCard) {
            draggedCard.classList.remove('dragging');
            draggedCard.style.zIndex = '';
        }
        isDragging = false;
        draggedCard = null;
    }

    let transitionRate = 300;
    const settingsButton = document.querySelector('div > div > button#settingsButton');
    const settingsModal = document.getElementById('settingsModal');
    const closeSettings = document.getElementById('closeSettings');
    const transitionRateInput = document.getElementById('transitionRate');
    const transitionRateValue = document.getElementById('transitionRateValue');

    function openSettings() {
        settingsModal.style.display = 'block';
    }

    function closeSettingsModal() {
        settingsModal.style.display = 'none';
    }

    function updateTransitionRate() {
        transitionRate = transitionRateInput.value;
        transitionRateValue.textContent = transitionRate;
        document.querySelectorAll('.card').forEach(card => {
            card.style.transition = `all ${transitionRate}ms ease`;
        });
    }

    settingsButton.addEventListener('click', openSettings);
    closeSettings.addEventListener('click', closeSettingsModal);
    transitionRateInput.addEventListener('input', updateTransitionRate);

    function updateCardSize() {
        cardSize = cardSizeInput.value;
        document.querySelectorAll('.card').forEach(card => {
            card.style.width = `${cardSize}px`;
            card.style.height = `${cardSize * 1.5}px`; // Maintain aspect ratio
        });
    }

    cardSizeInput.addEventListener('input', updateCardSize);

    document.getElementById('drawButton').addEventListener('click', drawCard);
    document.getElementById('shuffleButton').addEventListener('click', shuffleDeck);
    document.getElementById('deck').addEventListener('click', drawCard);
    document.addEventListener('mousemove', drag);
    document.addEventListener('mouseup', stopDragging);

    updateDeckDisplay();
    drawInitialHand();
    updateCardSize(); // Initialize card sizes
    console.log("Initial deck:", deckCards); // For debugging
</script>

<style>
    body {
        margin: 0;
        padding: 20px;
        box-sizing: border-box;
        min-height: 100vh;
    }

    .game-area {
        position: relative;
        min-height: 500px;
    }

    .deck-area {
        width: 120px;
        height: 180px;
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        text-align: center;
        position: fixed;
        bottom: 10px;
        right: 10px;
        cursor: pointer;
        z-index: 10;
    }

    .deck-area img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .deck-area span {
        position: absolute;
        bottom: 5px;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(255, 255, 255, 0.7);
        padding: 2px 5px;
        border-radius: 3px;
        font-size: 14px;
    }

    .button-area {
        margin-top: 10px;
    }

    .card {
        width: 150px;
        height: 225px;
        border: 1px solid #000;
        position: fixed;
        cursor: move;
        overflow: hidden;
        user-select: none;
        -webkit-user-drag: none;
        transition: all 300ms ease, transform 100ms ease;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        z-index: 100;
    }

    .card:hover, .card.dragging {
        transform: scale(1.05);
        box-shadow: 0 8px 16px rgba(0,0,0,0.2);
        z-index: 1000;
    }

    .card img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        pointer-events: none;
    }

    #settingsButton {
        padding: 5px 10px;
        font-size: 16px;
        cursor: pointer;
        background-color: #f0f0f0;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    #settingsButton:hover {
        background-color: #e0e0e0;
    }

    #cardSize {
        vertical-align: middle;
    }
</style>
