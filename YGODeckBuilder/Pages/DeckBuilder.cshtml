@page
@using YGODeckBuilder.Data.Models;
@model YGODeckBuilder.Pages.DeckBuilder

@{
    var TotalDeckCards = Model.Deck.ExtraDeck.Count() + Model.Deck.MainDeck.Count();
    var topAtkCard = Model.Deck.MainDeck.OrderByDescending(c => c.Atk ?? 0).FirstOrDefault(); // this is not working
    int pageSize = 10;
    int totalPages = Model.SearchCards != null ? (int)Math.Ceiling((double)Model.SearchCards.Count / pageSize) : 0;
    int currentPage = Request.Query.ContainsKey("page") ? Convert.ToInt32(Request.Query["page"]) : 1;
    int startIndex = (currentPage - 1) * pageSize;
    int endIndex = Math.Min(startIndex + pageSize - 1, Model.SearchCards.Count - 1);
}

<!DOCTYPE html>
<html>
<head>
    <!-- Include your necessary CSS and meta tags here -->
    <link rel="stylesheet" href="~/css/site.css">
    <link rel="stylesheet" href="~/css/deckBuilder.css">
    <link rel="stylesheet" href="~/css/doughnutChart.css">
    <!-- Include script references -->
    <script type="module" src="/js/deck.js"></script>
    <script type="module" src="/js/rendering.js"></script>
    <script type="module" src="/js/interaction.js"></script>
    <script type="module" src="/js/deckBuilder.js"></script>
    <script type="module" src="/js/doughnut.js"></script>
</head>
<body>
    <div class="DeckBuilder_Deck_Options">
        <button class="btn btn-warning" type="button" id="saveDeckButton">SAVE DECK</button>
        <button class="btn btn-dark" type="button" id="sortDeckButton">Sort</button>
        <button class="btn btn-danger" id="clearDeckButton">Clear</button>
        <button class="btn btn-secondary" id="shuffleDeckButton">Shuffle</button>
        <button class="btn btn-secondary" id="handTestButton">
            <a asp-page="/HandTesting" asp-route-deckName="@Model.Deck.DeckName">
                Hand Test
            </a>
        </button>
    </div>

    <div class="split-section">
        <div class="detail-section">
            <div class="image-details-container">
                <!-- Image -->
                <div class="image-container">
                    <img id="bigCard" class="inner bigCard" src="~/images/default_card_back.jpg" alt="Card Image" />
                </div>
                <div class="details">
                    <!-- Name -->
                    <div class="detail-item">
                        <h3 id="detail-name"></h3>
                    </div>
                    <!-- Type, Race, Attribute, and Level -->
                    <div class="detail-item">
                        <p id="detail-type"></p>
                        <p id="detail-race"></p>
                        <p id="detail-attribute"></p>
                        <p style="text-decoration-style:solid" id="detail-level"></p>
                    </div>
                    <!-- Archetype -->
                    <div class="detail-item">
                        <p id="detail-archetype"></p>
                    </div>
                    <!-- Text -->
                    <div class="detail-item">
                        <p id="detail-text"></p>
                    </div>
                </div>
            </div>
        </div>

        <div class="deck-section">
            <div class="deck-container">
                <div class="DeckBuilder_DeckInfo">
                    <div class="chartContainer">
                        <div class="chartImage">
                            <div id="doughnutChart" class="chart"></div>
                        </div>
                    </div>
                    <div class="infoContainer">
                        <h3>Deck Name: @Model.Deck.DeckName</h3>
                    </div>
                </div>
                <div class="DecksContainer">
                    <div class="DeckBuilder_DeckCards_Container">
                        <h2>Main Deck</h2>
                        <span class="main-deck-card-count" id="mainDeckCardCount"></span>
                        <div class="DeckBuilder_Container_MainDeck" id="main-deck" data-deck-type="MainDeck" ondrop="drop(event)" ondragover="dragOver(event)" ondragstart="dragStart(event)"></div>
                        <div class="RemoveFromDeckArea" id="remove-from-main-deck" ondrop="drop(event)" ondragover="dragOver(event)"></div>
                        <h2>Extra deck</h2>
                        <div class="extra-deck-card-count" id="extraDeckCardCount"></div>
                        <div class="DeckBuilder_Container_ExtraDeck" id="extra-deck" data-deck-type="ExtraDeck" ondrop="drop(event)" ondragover="dragOver(event)"></div>
                        <h2>Side deck</h2>
                        <div class="side-deck-card-count" id="sideDeckCardCount"></div>
                        <div class="DeckBuilder_Container_SideDeck" id="side-deck" data-deck-type="SideDeck" ondrop="drop(event)" ondragover="dragOver(event)"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="cards-section">
            <div class="searched-cards-container">
                <div class="DeckBuilder_CardSearch_Container">
                    <form method="GET">
                        <div class="form-group">
                            <div class="input-group">
                                <input type="search" class="form-control" id="searchInput" asp-for="SearchQuery" />
                                <button class="btn btn-light">Buscar</button>
                            </div>
                        </div>
                    </form>
                </div>
                @if (Model.SearchCards != null && Model.SearchCards.Count > 0)
                {
                    <div class="DeckBuilder_CardSearch_JS">
                        <!-- Searched cards will be displayed here -->
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Include necessary JavaScript files here -->
    @section Scripts {
        <script>
            // Expose the deck data as JavaScript variables
            var deckData = @Html.Raw(Json.Serialize(Model.Deck));
            var mainDeckData = @Html.Raw(Json.Serialize(Model.Deck.MainDeck));
            var extraDeckData = @Html.Raw(Json.Serialize(Model.Deck.ExtraDeck));
            var sideDeckData = @Html.Raw(Json.Serialize(Model.Deck.SideDeck));
            var searchedCards = @Html.Raw(Json.Serialize(Model.SearchCards));

            document.getElementById('handTestButton').addEventListener('click', function() {
            var deckJson = JSON.stringify(deckData);
            var encodedDeckJson = encodeURIComponent(deckJson);
            window.location.href = '/HandTesting?deck=' + encodedDeckJson;
        });
        </script>
    }
</body>
</html>
